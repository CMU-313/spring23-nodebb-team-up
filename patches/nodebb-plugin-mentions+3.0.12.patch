diff --git a/node_modules/nodebb-plugin-mentions/library.js b/node_modules/nodebb-plugin-mentions/library.js
index d81b581..05114a9 100644
--- a/node_modules/nodebb-plugin-mentions/library.js
+++ b/node_modules/nodebb-plugin-mentions/library.js
@@ -438,3 +438,11 @@ SocketPlugins.mentions.userSearch = async (socket, data) => {
 	return users;
 };
 
+SocketPlugins.mentions.postSearch = async (socket, data) => {
+	console.log("retrieving post");
+	let { posts } = await api.posts.get(socket, { pid: data.pid });
+	console.log("retrieved post: ");
+	console.log(posts);
+	return posts;
+};
+
diff --git a/node_modules/nodebb-plugin-mentions/static/autofill.js b/node_modules/nodebb-plugin-mentions/static/autofill.js
index 7587087..89ae9d0 100644
--- a/node_modules/nodebb-plugin-mentions/static/autofill.js
+++ b/node_modules/nodebb-plugin-mentions/static/autofill.js
@@ -17,6 +17,7 @@ $(document).ready(function () {
 			match: /\B@([^\s\n]*)?$/,
 			search: function (term, callback) {
 				require(['composer', 'helpers', 'slugify'], function (composer, helpers, _slugify) {
+					console.log(term);
 					slugify = _slugify;
 					let mentions = [];
 					if (!term) {
@@ -49,7 +50,7 @@ $(document).ready(function () {
 					});
 				});
 			},
-			index: 1,
+			index: 2,
 			replace: function (mention) {
 				// Strip (fullname) part from mentions
 				mention = mention.replace(/ \(.+\)/, '');
@@ -61,7 +62,75 @@ $(document).ready(function () {
 			cache: true,
 		};
 
+		const strat2 = {
+			match: /\B\$(\d+)$/,
+			search: function (term, callback) {
+				require(['composer', 'helpers', 'slugify'], function (composer, helpers, _slugify) { 
+					// console.log("strat2 search called! ");
+					// console.log(term);
+					// return callback(["test"]);
+					slugify = _slugify;
+					let mentions = [];
+					if (!term) {
+						return callback(mentions);
+					}
+
+					// Get composer metadata
+					// const uuid = data.options.className && data.options.className.match(/dropdown-(.+?)\s/)[1];
+					// socket.emit('plugins.mentions.postSearch', {
+					// 	query: term,
+					// 	composerObj: composer.posts[uuid]
+					// }, function (err, post) {
+					// 	console.log("proceeding to callback");
+					// 	console.log("post:", post.pid, post.content);
+
+					// 	if (err) {
+					// 		return callback([]);
+					// 	}
+
+					// 	// mentions = mentions.concat(usersToMentions(sortUsers(users), helpers));
+					// 	mentions = mentions.concat(postToMentions(post));
+
+
+					// 	console.log("callback:");
+					// 	console.log("mentions");
+					// 	callback(mentions);
+					// });
+					// const matches = term.match(/\d+/); // extract digits from term
+					// if (matches) {
+					// 	const postId = matches[0];
+					// 	const suggestion = '<a href="/pid/' + postId + '"> $' + postId + '</a>'; // create suggestion with link to post
+					// 	return callback([suggestion]);
+					// } else {
+					// 	return callback([]);
+					// }
+					// const suggestion = '<a href="/pid/' + term + '"> $' + term + '</a>'; // create suggestion with link to post
+					const suggestion = `pid: ${term}`;
+					mentions.push(suggestion);
+					// console.log(mentions);
+					return callback(mentions);
+				}); 
+			},
+			index: 1,
+			replace: function (mention) {
+				// console.log("strat2 replace called! ");
+				// console.log(mention);
+				// mention = $('<div/>').html(mention);
+				// return '$' + slugify(mention, true) + ' ';
+				// const num = mention.match(/\d+/)[1];
+				// return '<a href="/pid/' + num + '"> ' + mention + '</a>';
+				// mention = mention.replace(/pid: /, '');
+				const pid = mention.substring(5);
+				const box = `[\# ${pid}]`;
+				const par = `(/post/${pid})`;
+				return box + par;
+			},
+			cache: true,
+		};
+
 		data.strategies.push(strategy);
+		
+		data.strategies.push(strat2);
 	});
 
 	$(window).on('action:composer.loaded', function (ev, data) {
@@ -91,6 +160,12 @@ $(document).ready(function () {
 		}, []);
 	}
 
+	function postToMentions(post) {
+		console.log("called postToMentions");
+		const preview = post.content.length > 20 ? post.content.substring(0, 20) + "..." : post.content;
+		return [`${post.topic.thumb} ${post.user.username} ${preview}`];
+	}
+
 	function loadTopicUsers(element) {
 		require(['composer', 'alerts'], function (composer, alerts) {
 			const composerEl = element.parents('.composer').get(0);
diff --git a/node_modules/nodebb-plugin-mentions/test/regex.js b/node_modules/nodebb-plugin-mentions/test/regex.js
index 50de857..8654052 100644
--- a/node_modules/nodebb-plugin-mentions/test/regex.js
+++ b/node_modules/nodebb-plugin-mentions/test/regex.js
@@ -11,6 +11,27 @@ const db = require.main.require('./test/mocks/databasemock');
 // use core slugify module
 const slugify = require.main.require('./src/slugify');
 
+// Tests for tagging posts functionality
+describe('post_regex', function () {
+	const matcher2 = new RegExp(regex);
+	const strings2 = [
+		'$001',
+		'$001 some text',
+		'some text $001',
+		'end of sentence. $001',
+		'$001.',
+		'$001\'s some text',
+	]
+	it('should match a post tag in all strings', () => {
+		strings2.forEach(string => {
+			const matches2 = string.match(matcher2);
+			assert(matches2);
+			assert.equal(slugify(matches2[0]), '001');
+		});
+	});
+});
+
+
 describe('regex', function () {
 	const matcher = new RegExp(regex);
 	const strings = [
